/**
    Styles, classes and mixims that
    extends the Bootstrap core or replace some
    not 'customizable' pieces.
**/

@import 'styleguideVars.styl'

// Added a new semantic color, 'secondary', 
// create the button for that
@import '../../../vendor/bootstrap/styl/mixins/buttons.styl'
$btn-secondary-color = #fff
$btn-secondary-bg = lighten($brand-secondary, 10%)
$btn-secondary-border = lighten($brand-secondary-dark, 10%)
.btn-secondary {
    button-variant($btn-secondary-color, $btn-secondary-bg, $btn-secondary-border);
}

a {
  color: inherit;
  text-decoration: none;
  &:hover,
  &:focus {
      color: inherit;
      text-decoration: none;
      outline: none;
  }
}

.btn-default {
    background: transparent;
    border-color: $gray;
    color: $gray;
    &:hover,
    &:focus,
    &:active,
    &:target,
    &:link {
        color: $brand-secondary;
        border-color: $brand-secondary;
        background: transparent;
    }
}


// Create the text-secondary
.text-secondary {
    color: $brand-secondary;
}

/**
    The form control static has by default a different padding
    than the real form controls. Must be the same, taking care
    of the border size.
    TODO: Use variables from Bootstrap rather than static values
**/
.form-control-static {
    padding: 7px 13px;
}

/**
    To solve the usability and between-scripts interaction problems 
    of Bootstrap toggle buttons for radio and checkboxes, is better
    replace the use of data-toggle="buttons" on .btn-groups > input[type=radio|checkbox]
    by this utility class .ut-noRadioCheck.
    The Boostrap code for the toggle-buttons breaks when used with other
    scripts like Knockout; using Knockout to keep the 'active' class applied
    on the label (with .btn class) fix interaction and this class
    removes the native UI for the radio and checkbox if unwanted.
**/
.ut-noRadioCheck {
    input[type="radio"],
    input[type="checkbox"] {
        position: absolute;
        left: -99999px;
        // Bootstrap uses the deprecated 'clip' trick rather than a negative position.
        clip: rect(0px, 0px, 0px, 0px);
    }
    
    // Fix bug in iOS: span elements inside the label (used normally to set text programatically)
    // make that it receive the first click/touch, not reacting the label and not setting the underground
    // radio input, needing a long-tap to get enabled; gets solved making that span elements not able
    // to react to events
    label span {
        pointer-events: none;
    }
}

/**
    Overwritting buttons and form controls default style:
**/
// Flatty, square
.form-control,
// Increased specifity to overwrite the group/addons styles:
.input-group > .input-group-addon,
.input-group > .form-control,
// All buttons
.btn {
    border-radius: 0; // Or 1px so looks square but gets a smooth rendering??
    font-weight: 700;
    &:hover,
    &:focus {
        text-decoration: none;
        outline: none;
    }
}
.btn-link {
    &:hover,
    &:focus,
    &:active{
        text-decoration: none;
        outline: none;
    }
}

.btn-link.text-secondary {
    color: $brand-secondary;
    background-color: transparent;
    &:hover,
    &:focus,
    &:active{
        color: $brand-secondary-dark;
    }
}

// Only bottom border to look flatty
.form-control,
.input-group-addon,
// All button styles except default and link
.btn-primary,
.btn-secondary,
.btn-info,
.btn-success,
.btn-warning,
.btn-danger {
    // Looks near flat, just only border on bottom, so
    // put others as transparent so keeps the expected size
    // while with current box-sizing the border area shows the
    // background
    border-top-color: transparent;
    border-right-color: transparent;
    border-left-color: transparent;
}
// No box shadow on default state
// NOTE: Apply only one class selector to don't override pseudo-class styles
.form-control,
.input-group-addon,
.btn {
    box-shadow: none;
}
// Remove borders on the special '.inset' class form input groups
.input-group > .form-control.inset,
.input-group > .form-control.inset {
    border-left-color: transparent;
    border-right-color: transparent;
}

// Because of the border change, form controls on default, white background
// does not looks like a control, add a background
// Other form styles can revert this to white again
// 15April2016: changed this back to white since Activity default is now gray-background.
.form-control {
    background: white;
}

// COLUMNS RESET
// Allow reset the column paddings and other features added because of global
// Bootstrap column styles that get applied even when in sizes that must not apply.
// Example: a col-md-6 column becomes implicitelly a col-xs-12 on mobile, what
// means it keeps the padding/column gutter even if you do not want a column on 
// that size; the only way to let the column use the full width, without padding,
// is to reset that: do it with this classes, that apply on each size and smaller
// following the opposite Bootstrap rules for col-* classes because thats the common
// use case for resets
col-reset() {
    padding-right: 0;
    padding-left: 0;
    min-height: 0;
    position: static;
}
.col-lg-reset {
    col-reset()
}
@media $mediaMaxXs {
    .col-xs-reset {
        col-reset();
    }
}
@media $mediaMaxSm {
    .col-sm-reset {
        col-reset();
    }
}
@media $mediaMaxMd {
    .col-md-reset {
        col-reset();
    }
}

// Additional icon size, between size fa-lg and fa-2x, with a good
// size for quality ionicons
// NOTE: is not technically a Bootstrap extension, and size is targetting specially
// ion icons (that do not resize very well on every size) but usable fa icons too.
.fa-xl {
    font-size: 25px;
}

// Removing padding from the container class with additional complementary class
// This allows to use the sizing limits of container on wider screens but
// without the extra space, usefull when the content needs to use all the width
// (specially on mobile) or has more advanced padding set-up internally.
// Size suffixes work inverse of general Bootstrap, applying to that size and smaller
ResetSectionTitleMargin() {
    .SectionTitle {
        margin-left: 0;
        margin-right: 0;
    }
}
.container,
.container-fluid {
    @media $mediaMaxXs {
        &.nogaps-xs {
            padding: 0;
            ResetSectionTitleMargin();
        }
    }
    $mediaOnly = $mediaMinSm + ' and ' + $mediaMaxSm;
    @media $mediaOnly {
        &.nogaps-sm {
            padding: 0;
            ResetSectionTitleMargin();
        }
    }
    $mediaOnly = $mediaMinMd + ' and ' + $mediaMaxMd;
    @media $mediaOnly {
        &.nogaps-md {
            padding: 0;
            ResetSectionTitleMargin();
        }
    }
    @media $mediaMinLg {
        &.nogaps-lg {            
            padding: 0;
            ResetSectionTitleMargin();
        }
    }
}


// custom styles for dropdown-menus across app
.dropdown-menu {
  float: left;
  margin-top: 0px;
  background-color: #fff;
  -webkit-box-shadow: 0 1.5px 0 0 $gray-background;
  box-shadow: 0 1.5px 0 0 $gray-background;
  border-radius: 0px;
  
  .App-menus-group-header {    
        padding: 0px 10px 10px;
        border-bottom: 1px solid $gray-light;
        color: $gray-light;            
        font-size: 1.1em;
  }  
  > li {
        width: 250px;
        &.go-marketplace,
        &.go-help,
        &.go-download{
          display none;
        }
        > a {
        color: $gray;        
        font-size: 1.1em;               
        padding: 10px 10px 10px 40px;
        margin: 0;

        // icons
        > i {
            color: $gray;
            font-size: 1.5em;      
            margin-right: 5px;
        }

        &:hover,
        &:focus {
          color: $brand-secondary-dark !important;
          background-color: transparent;
          padding-left: 42px;
          > i {
            color: $brand-secondary-dark !important;
          }
        }
        }
    }
    li.active > a {
      color: $gray-dark !important;
      background: transparent;  
      > i {
        color: $gray-dark !important;
      }
    }
}

.bootstrap-switch {
    border-color: $gray;
    border-radius: 0px;
}

.bootstrap-switch-handle-on 
&.bootstrap-switch-primary {
    background-color: $brand-success;
    color: white;
    border-radius: 0px;
}
.bootstrap-switch-handle-off 
&.bootstrap-switch-default {
    background-color: $gray-background;
    border-radius: 0px;
}
.bootstrap-switch-label {
    border-radius: 0px;
}
.checkbox,
.radio {
  margin-left: 15px;
}
.well {
    margin: 15px 35px;
    padding: 20px 20px -5px 20px;
    background-color: #FFFFA5;
    border: none;
    
    .list-group {      
      margin-bottom: 0px;
      padding-left: 20px;
    }
}

// Fixing usability issue at Bootstrap: the close button at modals must have a bigger touchable area
.modal .modal-header .close {
    margin-top: -10px;
    margin-right: -12px;
    padding: 8px 12px;
}
// TODO: make this cross browser, not just webkit specific (and standard/future-proof if possible)
input[type=number]::-webkit-inner-spin-button, 
input[type=number]::-webkit-outer-spin-button { 
  -webkit-appearance: none; 
  margin: 0; 
}

.bg-white {
    background-color: white;
}
.icon-secure {
    font-size: 29px !important;
    top: 27px;
}
input[type=number]::-webkit-inner-spin-button, 
input[type=number]::-webkit-outer-spin-button { 
  -webkit-appearance: none; 
  margin: 0; 
}

